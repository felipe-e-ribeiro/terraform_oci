name: Deploy
on:
  push:
    branches: [main]
  pull_request:

jobs:
  terraform-process:
    name: Terraform Process
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.7
          cli_config_credentials_token: ${{ secrets.AWS_ACCESS_KEY_ID }}
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform init
        env:
          TF_VAR_private_key: ${{ secrets.TF_VAR_private_key }}
          TF_VAR_user_ocid: ${{ secrets.TF_VAR_user_ocid }}
          TF_VAR_fingerprint: ${{ secrets.TF_VAR_fingerprint }}
          TF_VAR_tenancy_ocid: ${{ secrets.TF_VAR_tenancy_ocid }}
          TF_VAR_region: ${{ secrets.TF_VAR_region }}
          TF_VAR_compartment_root_id: ${{ secrets.TF_VAR_compartment_root_id }}
          TF_VAR_ssh_authorized_keys: ${{ secrets.TF_VAR_ssh_authorized_keys }}
        id: init
        run: terraform init -input=false

      - name: Terraform validation
        id: validate
        run: terraform validate

      - name: Terraform plan
        env:
          TF_VAR_private_key: ${{ secrets.TF_VAR_private_key }}
          TF_VAR_user_ocid: ${{ secrets.TF_VAR_user_ocid }}
          TF_VAR_fingerprint: ${{ secrets.TF_VAR_fingerprint }}
          TF_VAR_tenancy_ocid: ${{ secrets.TF_VAR_tenancy_ocid }}
          TF_VAR_region: ${{ secrets.TF_VAR_region }}
          TF_VAR_compartment_root_id: ${{ secrets.TF_VAR_compartment_root_id }}
          TF_VAR_ssh_authorized_keys: ${{ secrets.TF_VAR_ssh_authorized_keys }}
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v5
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.TOKEN_GITHUB }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment ({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name : Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          TF_VAR_private_key: ${{ secrets.TF_VAR_private_key }}
          TF_VAR_user_ocid: ${{ secrets.TF_VAR_user_ocid }}
          TF_VAR_fingerprint: ${{ secrets.TF_VAR_fingerprint }}
          TF_VAR_tenancy_ocid: ${{ secrets.TF_VAR_tenancy_ocid }}
          TF_VAR_region: ${{ secrets.TF_VAR_region }}
          TF_VAR_compartment_root_id: ${{ secrets.TF_VAR_compartment_root_id }}
          TF_VAR_ssh_authorized_keys: ${{ secrets.TF_VAR_ssh_authorized_keys }}
